<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="/jekyll-theme-yat/" rel="alternate" type="text/html" /><updated>2024-07-06T14:40:09+00:00</updated><id>/jekyll-theme-yat/feed.xml</id><title type="html">Vanko’s 个人博客网站</title><subtitle>这是一个个人博客网站，用于记录个人的学习笔记，以及一些技术分享。</subtitle><author><name>zhaohuanke123</name></author><entry><title type="html"></title><link href="/jekyll-theme-yat/2024/07/06/2022-02-02-Lua%E5%AD%A6%E4%B9%A0.html" rel="alternate" type="text/html" title="" /><published>2024-07-06T14:40:09+00:00</published><updated>2024-07-06T14:40:09+00:00</updated><id>/jekyll-theme-yat/2024/07/06/2022-02-02-Lua%E5%AD%A6%E4%B9%A0</id><content type="html" xml:base="/jekyll-theme-yat/2024/07/06/2022-02-02-Lua%E5%AD%A6%E4%B9%A0.html"><![CDATA[<h1 id="lua">Lua</h1>

<p>语言内置模式匹配；</p>

<p>闭包(closure)；</p>

<p>函数也可以看做一个值；</p>

<p>提供多线程（协同进程，并非操作系统所支持的线程）支持；</p>

<h1 id="数据类型">数据类型</h1>

<p>number</p>

<p>string</p>

<p>boolean</p>

<p>nil</p>

<p>function</p>

<p>table</p>

<p>userdata</p>

<p>thread</p>

<p>ipairs 和 pairs 区别</p>

<h1 id="闭包">闭包</h1>

<p>函数内返回函数</p>

<p>向上寻找上值</p>

<h1 id="表-table">表 table</h1>

<h1 id="大g表">大G表</h1>

<p>总表，也是一个Table（所有变量存储其中）</p>

<h1 id="协程">协程</h1>

<h1 id="元表">元表</h1>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">co</span> <span class="o">=</span> <span class="nb">coroutine.create</span><span class="p">(</span><span class="k">function</span><span class="p">()</span>
    <span class="k">while</span> <span class="kc">true</span> <span class="k">do</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"coroutine"</span><span class="p">)</span>
        <span class="nb">coroutine.yield</span><span class="p">()</span>
    <span class="k">end</span>
<span class="k">end</span><span class="p">)</span>

<span class="nb">coroutine.resume</span><span class="p">(</span><span class="n">co</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="实现面向对象">实现面向对象</h1>

<p>使用表 表现 类的特性</p>

<p>使用 .调用函数 和 : 调用函数区别</p>

<p>：默认 传入 self</p>

<h2 id="封装">封装</h2>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Object</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">Object</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">function</span> <span class="nf">Object</span><span class="p">:</span><span class="n">new</span><span class="p">()</span>
    <span class="kd">local</span> <span class="n">o</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="nb">setmetatable</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">self</span>
    <span class="k">return</span> <span class="n">o</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">o</span> <span class="o">=</span> <span class="n">Object</span><span class="p">:</span><span class="n">new</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">o</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="继承">继承</h2>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="nf">Object</span><span class="p">:</span><span class="n">subClass</span><span class="p">(</span><span class="n">className</span><span class="p">)</span>
    <span class="n">_G</span><span class="p">[</span><span class="n">className</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="kd">local</span> <span class="n">class</span> <span class="o">=</span> <span class="n">_G</span><span class="p">[</span><span class="n">className</span><span class="p">]</span>
    <span class="n">self</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">self</span>

    <span class="nb">setmetatable</span><span class="p">(</span><span class="n">class</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">Object</span><span class="p">:</span><span class="n">subClass</span><span class="p">(</span><span class="s2">"Test"</span> <span class="p">)</span>
<span class="n">Test</span><span class="p">.</span><span class="n">mm</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"123123"</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">t</span> <span class="o">=</span>  <span class="n">Test</span><span class="p">:</span><span class="n">new</span><span class="p">()</span>
<span class="n">t</span><span class="p">.</span><span class="n">mm</span><span class="p">()</span>

<span class="n">Test</span><span class="p">:</span><span class="n">subClass</span><span class="p">(</span><span class="s2">"Test2"</span><span class="p">)</span>
<span class="n">t2</span> <span class="o">=</span> <span class="n">Test2</span><span class="p">:</span><span class="n">new</span><span class="p">()</span>
<span class="n">t2</span><span class="p">.</span><span class="n">mm</span><span class="p">()</span>

</code></pre></div></div>

<h1 id="多态">多态</h1>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Object</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">Object</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">function</span> <span class="nf">Object</span><span class="p">:</span><span class="n">new</span><span class="p">()</span>
    <span class="kd">local</span> <span class="n">o</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="nb">setmetatable</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">self</span>
    <span class="k">return</span> <span class="n">o</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">Object</span><span class="p">:</span><span class="n">subClass</span><span class="p">(</span><span class="n">className</span><span class="p">)</span>
    <span class="n">_G</span><span class="p">[</span><span class="n">className</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="kd">local</span> <span class="n">class</span> <span class="o">=</span> <span class="n">_G</span><span class="p">[</span><span class="n">className</span><span class="p">]</span>
    <span class="n">self</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">self</span>
    <span class="n">class</span><span class="p">.</span><span class="n">base</span> <span class="o">=</span> <span class="n">self</span> <span class="c1">-- 保存父类</span>
    <span class="nb">setmetatable</span><span class="p">(</span><span class="n">class</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">Object</span><span class="p">:</span><span class="n">subClass</span><span class="p">(</span><span class="s2">"Test"</span> <span class="p">)</span>

<span class="k">function</span> <span class="nf">Test</span><span class="p">:</span><span class="n">ctor</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"Test:ctor"</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">Test</span><span class="p">:</span><span class="n">subClass</span><span class="p">(</span><span class="s2">"Test2"</span><span class="p">)</span>

<span class="k">function</span> <span class="nf">Test2</span><span class="p">:</span><span class="n">ctor</span><span class="p">()</span>
    <span class="n">self</span><span class="p">.</span><span class="n">base</span><span class="p">.</span><span class="n">ctor</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="c1">-- 调用父类的构造函数，这里一定要用 . 而不是 :，然后传入 self</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"Test2:ctor"</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">t</span> <span class="o">=</span> <span class="n">Test2</span><span class="p">:</span><span class="n">new</span><span class="p">()</span>
<span class="n">t</span><span class="p">:</span><span class="n">ctor</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="内存回收">内存回收</h1>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span> <span class="o">=</span> <span class="p">{</span><span class="n">id</span><span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"test"</span><span class="p">}</span>
<span class="n">test1</span> <span class="o">=</span> <span class="p">{</span><span class="n">id</span><span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"test"</span><span class="p">}</span>
<span class="n">test2</span> <span class="o">=</span> <span class="p">{</span><span class="n">id</span><span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"test"</span><span class="p">}</span>
<span class="n">test3</span> <span class="o">=</span> <span class="p">{</span><span class="n">id</span><span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="n">name</span> <span class="o">=</span> <span class="s2">"test"</span><span class="p">}</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">collectgarbage</span><span class="p">(</span><span class="s2">"count"</span><span class="p">))</span>
<span class="n">test</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="n">test1</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="n">test2</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="n">test3</span> <span class="o">=</span> <span class="kc">nil</span>
<span class="nb">collectgarbage</span><span class="p">(</span><span class="s2">"collect"</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">collectgarbage</span><span class="p">(</span><span class="s2">"count"</span><span class="p">))</span>
</code></pre></div></div>

<p>有自动GC的机制</p>]]></content><author><name>zhaohuanke123</name></author></entry><entry><title type="html">第k大问题</title><link href="/jekyll-theme-yat/2024/07/06/%E7%AC%ACK%E5%A4%A7%E9%97%AE%E9%A2%98.html" rel="alternate" type="text/html" title="第k大问题" /><published>2024-07-06T00:00:00+00:00</published><updated>2024-07-06T00:00:00+00:00</updated><id>/jekyll-theme-yat/2024/07/06/%E7%AC%ACK%E5%A4%A7%E9%97%AE%E9%A2%98</id><content type="html" xml:base="/jekyll-theme-yat/2024/07/06/%E7%AC%ACK%E5%A4%A7%E9%97%AE%E9%A2%98.html"><![CDATA[<h2 id="1">1</h2>

<h2 id="2">2</h2>]]></content><author><name>JoVanko</name></author><category term="算法" /><summary type="html"><![CDATA[1]]></summary></entry><entry><title type="html">红点树设计</title><link href="/jekyll-theme-yat/2024/07/06/%E7%BA%A2%E7%82%B9%E6%A0%91%E8%AE%BE%E8%AE%A1.html" rel="alternate" type="text/html" title="红点树设计" /><published>2024-07-06T00:00:00+00:00</published><updated>2024-07-06T00:00:00+00:00</updated><id>/jekyll-theme-yat/2024/07/06/%E7%BA%A2%E7%82%B9%E6%A0%91%E8%AE%BE%E8%AE%A1</id><content type="html" xml:base="/jekyll-theme-yat/2024/07/06/%E7%BA%A2%E7%82%B9%E6%A0%91%E8%AE%BE%E8%AE%A1.html"><![CDATA[<p>红点提示是一种常见的用户界面元素，用于提示玩家有未读的消息或待处理的任务，那么它是怎么实现的呢？</p>

<h2 id="逻辑说明">逻辑说明</h2>

<p>UI上的红点有上下级关系，比如游戏主界面有个通行证按钮可以有红点显示，点开的通行证界面有多个子页面，切换页面的按钮可以有红点显示</p>

<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6eda1f1a18d45c29728748ea4259a4f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1340&amp;h=62&amp;s=126387&amp;e=png&amp;b=4e8b94" alt="image.png" /></p>

<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b851c2f51d0c47a69fca0111f8148384~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1344&amp;h=72&amp;s=110153&amp;e=png&amp;b=2d505b" alt="image.png" />
我们想一想这里红点的逻辑，打开的界面里的换页按钮红点“出现”，外面打开界面的按钮的红点就需要“出现”。
（这里说的出现是逻辑上的需要出现，实际界面没打开，看不到红点就不需要显示，就是业务开发中常用的逻辑和显示分离）</p>

<p>通行证界面的每个分页按钮又可能与分页内的一些领取奖励红点有上下级关系，这种多叉的关系在数据结构上我们可以用一棵树来表示。</p>

<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38be48ef7d054dc9a5b9e292367966e7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=266&amp;h=154&amp;s=12437&amp;e=png&amp;b=586d8b" alt="image.png" /></p>

<p>我们的子节点需要显示红点时，该节点向上的父节点一直到根节点也需要显示。</p>

<p>下面在使用Unity和C# 演示代码实现</p>

<h2 id="代码实现">代码实现</h2>

<p>我们需要定义一个节点类表示一个红点节点</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">ReDotNode</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">mId</span><span class="p">;</span> <span class="c1">// 标识某个节点</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span>
    <span class="p">{</span>
       <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">mId</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">mValue</span><span class="p">;</span> <span class="c1">// 当前节点的逻辑值，大于0则需要显示表现上的红点</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="n">Value</span>
    <span class="p">{</span>
       <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">mValue</span><span class="p">;</span> <span class="p">}</span>
       <span class="k">set</span> <span class="p">{</span> <span class="n">mValue</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="kt">bool</span> <span class="n">mIsDirty</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsDirty</span>
    <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">mIsDirty</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span> <span class="n">mIsDirty</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ReDotNode</span><span class="p">&gt;</span> <span class="n">mChild</span><span class="p">;</span>
  
    <span class="k">public</span> <span class="k">void</span> <span class="nf">AddChild</span><span class="p">(</span><span class="n">ReDotNode</span> <span class="n">node</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="k">if</span> <span class="p">(</span><span class="n">mChild</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
          <span class="n">mChild</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">ReDotNode</span><span class="p">&gt;();</span>
       <span class="n">mChild</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
       <span class="n">node</span><span class="p">.</span><span class="n">mParent</span> <span class="p">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">mCheckFun</span><span class="p">;</span> <span class="c1">// 更新节点值的委托</span>
    <span class="k">public</span> <span class="n">Action</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">mUpdateFun</span><span class="p">;</span> <span class="c1">// 更新界面红点的委托</span>

    <span class="k">public</span> <span class="nf">ReDotNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="k">this</span><span class="p">.</span><span class="n">mId</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
       <span class="n">mValue</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>红点树逻辑，处于性能考虑，可以采用延迟更新的方式，通过设置一个脏标记字段，在Update轮询是否有脏数据。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">RedDotTree</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="n">ReDotNode</span> <span class="n">mRoot</span><span class="p">;</span>
    <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">ReDotNode</span><span class="p">&gt;</span> <span class="n">mNodes</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">ReDotNode</span><span class="p">&gt;();</span>
    <span class="kt">bool</span> <span class="n">isDirty</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">ReDotNode</span> <span class="nf">FindNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="k">if</span> <span class="p">(</span><span class="n">mNodes</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="k">out</span> <span class="kt">var</span> <span class="n">node</span><span class="p">))</span>
       <span class="p">{</span>
          <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
       <span class="p">}</span>

       <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">SetDirty</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="kt">var</span> <span class="n">node</span> <span class="p">=</span> <span class="n">mNodes</span><span class="p">[</span><span class="n">id</span><span class="p">];</span>
       <span class="n">node</span><span class="p">.</span><span class="n">IsDirty</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
       <span class="n">isDirty</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="n">ReDotNode</span> <span class="nf">Register</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">int</span> <span class="n">parentId</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="n">ReDotNode</span> <span class="n">node</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ReDotNode</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
       <span class="k">if</span> <span class="p">(</span><span class="n">mNodes</span><span class="p">.</span><span class="nf">ContainsKey</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
       <span class="p">{</span>
          <span class="n">Debug</span><span class="p">.</span><span class="nf">LogError</span><span class="p">(</span><span class="s">"RedDotTree Register Error: id is already exist!"</span><span class="p">);</span>
       <span class="p">}</span>
       <span class="n">mNodes</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="p">=</span> <span class="n">node</span><span class="p">;</span>
       <span class="k">if</span> <span class="p">(</span><span class="n">mRoot</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
       <span class="p">{</span>
          <span class="n">mRoot</span> <span class="p">=</span> <span class="n">node</span><span class="p">;</span>
       <span class="p">}</span>
       <span class="k">else</span>
       <span class="p">{</span>
          <span class="kt">var</span> <span class="n">cur</span> <span class="p">=</span> <span class="nf">FindNode</span><span class="p">(</span><span class="n">parentId</span><span class="p">);</span>
          <span class="n">cur</span><span class="p">.</span><span class="nf">AddChild</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
       <span class="p">}</span>

       <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="nf">UpdateNode</span><span class="p">(</span><span class="n">ReDotNode</span> <span class="n">node</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="kt">int</span> <span class="k">value</span><span class="p">;</span>

       <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">IsDirty</span><span class="p">)</span>
       <span class="p">{</span>
          <span class="k">value</span> <span class="p">=</span> <span class="n">node</span><span class="p">.</span><span class="n">mCheckFun</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">()</span> <span class="p">??</span> <span class="m">0</span><span class="p">;</span>
       <span class="p">}</span>
       <span class="k">else</span>
       <span class="p">{</span>
          <span class="k">value</span> <span class="p">=</span> <span class="n">node</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
       <span class="p">}</span>

       <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">mChild</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
       <span class="p">{</span>
          <span class="k">foreach</span> <span class="p">(</span><span class="n">ReDotNode</span> <span class="n">_node</span> <span class="k">in</span> <span class="n">node</span><span class="p">.</span><span class="n">mChild</span><span class="p">)</span>
          <span class="p">{</span>
             <span class="k">value</span> <span class="p">+=</span> <span class="nf">UpdateNode</span><span class="p">(</span><span class="n">_node</span><span class="p">);</span>
          <span class="p">}</span>
       <span class="p">}</span>

       <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="p">!=</span> <span class="n">node</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span>
       <span class="p">{</span>
          <span class="n">node</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
          <span class="n">node</span><span class="p">.</span><span class="n">mUpdateFun</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
       <span class="p">}</span>

       <span class="k">return</span> <span class="k">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">float</span> <span class="n">TimerSet</span> <span class="p">=</span> <span class="m">0.2f</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">timer</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="kt">float</span> <span class="n">deltaTime</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="k">if</span> <span class="p">(!</span><span class="n">isDirty</span><span class="p">)</span>
       <span class="p">{</span>
          <span class="n">timer</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
          <span class="k">return</span><span class="p">;</span>
       <span class="p">}</span>

       <span class="n">timer</span> <span class="p">+=</span> <span class="n">deltaTime</span><span class="p">;</span>
       <span class="k">if</span> <span class="p">(</span><span class="n">timer</span> <span class="p">&lt;</span> <span class="n">TimerSet</span><span class="p">)</span>
          <span class="k">return</span><span class="p">;</span>
       <span class="n">timer</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

       <span class="nf">UpdateNode</span><span class="p">(</span><span class="n">mRoot</span><span class="p">);</span>
       <span class="n">isDirty</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这样就可以实现一个简单的红点树逻辑</p>

<p>使用上，有俩个步骤</p>

<ol>
  <li>确认UI上下级关系，构建树型结构，注册各个节点</li>
  <li>在各个节点上绑定红点UI更新的逻辑</li>
</ol>

<p>实例如下：</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">RedDotView</span> <span class="p">:</span> <span class="n">MonoBehaviour</span> <span class="c1">// UI组件，挂载在红点组件上，绑定对应的字段</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">CanvasGroup</span> <span class="n">cg</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">parentId</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="k">value</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
       <span class="n">ReDotNode</span> <span class="n">node</span> <span class="p">=</span> <span class="n">RedDotTree</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">FindNode</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
       <span class="n">node</span><span class="p">.</span><span class="n">mUpdateFun</span> <span class="p">+=</span> <span class="p">(</span><span class="n">newValue</span><span class="p">)</span> <span class="p">=&gt;</span>
       <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">newValue</span> <span class="p">&gt;=</span> <span class="m">1</span><span class="p">)</span>
          <span class="p">{</span>
             <span class="n">cg</span><span class="p">.</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="k">else</span>
          <span class="p">{</span>
             <span class="n">cg</span><span class="p">.</span><span class="n">alpha</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
          <span class="p">}</span>
       <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>仅测试示例，实际使用需要根据自己项目进行调整。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">TestMgr</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
       <span class="kt">var</span> <span class="n">redDotView</span> <span class="p">=</span> <span class="n">GetComponentsInChildren</span><span class="p">&lt;</span><span class="n">RedDotView</span><span class="p">&gt;();</span>
       <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">view</span> <span class="k">in</span> <span class="n">redDotView</span><span class="p">)</span>
       <span class="p">{</span>
          <span class="n">RedDotTree</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">view</span><span class="p">.</span><span class="n">parentId</span><span class="p">);</span>
       <span class="p">}</span>
       <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">view</span> <span class="k">in</span> <span class="n">redDotView</span><span class="p">)</span>
       <span class="p">{</span>
          <span class="n">ReDotNode</span> <span class="n">node</span> <span class="p">=</span> <span class="n">RedDotTree</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">FindNode</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">id</span><span class="p">);</span>
          <span class="n">node</span><span class="p">.</span><span class="n">mCheckFun</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">view</span><span class="p">.</span><span class="k">value</span><span class="p">;</span>

          <span class="n">RedDotTree</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">SetDirty</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">id</span><span class="p">);</span>
      <span class="p">}</span>
       <span class="n">RedDotTree</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">SetDirty</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">TestRedDot</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="n">RedDotView</span> <span class="n">redDotView</span><span class="p">;</span>
    <span class="n">Button</span> <span class="n">button</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">Text</span> <span class="n">ValueText</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">Text</span> <span class="n">SumText</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">isInit</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="k">void</span> <span class="nf">Awake</span><span class="p">()</span>
    <span class="p">{</span>
       <span class="n">redDotView</span> <span class="p">=</span> <span class="n">GetComponentInChildren</span><span class="p">&lt;</span><span class="n">RedDotView</span><span class="p">&gt;();</span>
       <span class="n">button</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Button</span><span class="p">&gt;();</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">Init</span><span class="p">()</span>
    <span class="p">{</span>
       <span class="n">redDotView</span> <span class="p">=</span> <span class="n">GetComponentInChildren</span><span class="p">&lt;</span><span class="n">RedDotView</span><span class="p">&gt;();</span>
       <span class="n">button</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Button</span><span class="p">&gt;();</span>
       <span class="n">button</span><span class="p">.</span><span class="n">onClick</span><span class="p">.</span><span class="nf">AddListener</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="c1">// 测试点击修改值</span>
       <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">redDotView</span><span class="p">.</span><span class="k">value</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span>
          <span class="p">{</span>
             <span class="n">redDotView</span><span class="p">.</span><span class="k">value</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="k">else</span>
          <span class="p">{</span>
             <span class="n">redDotView</span><span class="p">.</span><span class="k">value</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="n">RedDotTree</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">SetDirty</span><span class="p">(</span><span class="n">redDotView</span><span class="p">.</span><span class="n">id</span><span class="p">);</span>
       <span class="p">});</span>
       <span class="n">isInit</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
       <span class="k">if</span> <span class="p">(!</span><span class="n">isInit</span><span class="p">)</span>
       <span class="p">{</span>
          <span class="nf">Init</span><span class="p">();</span>
       <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">OnEnable</span><span class="p">()</span>
    <span class="p">{</span>
       <span class="k">if</span> <span class="p">(!</span><span class="n">isInit</span><span class="p">)</span>
       <span class="p">{</span>
          <span class="k">return</span><span class="p">;</span>
       <span class="p">}</span>

       <span class="n">button</span><span class="p">.</span><span class="n">onClick</span><span class="p">.</span><span class="nf">AddListener</span><span class="p">(()</span> <span class="p">=&gt;</span>
       <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">redDotView</span><span class="p">.</span><span class="k">value</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span>
          <span class="p">{</span>
             <span class="n">redDotView</span><span class="p">.</span><span class="k">value</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="k">else</span>
          <span class="p">{</span>
             <span class="n">redDotView</span><span class="p">.</span><span class="k">value</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
          <span class="p">}</span>
          <span class="n">RedDotTree</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">SetDirty</span><span class="p">(</span><span class="n">redDotView</span><span class="p">.</span><span class="n">id</span><span class="p">);</span>
       <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">OnDisable</span><span class="p">()</span>
    <span class="p">{</span>
       <span class="n">button</span><span class="p">.</span><span class="n">onClick</span><span class="p">.</span><span class="nf">RemoveAllListeners</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">void</span> <span class="nf">Update</span><span class="p">()</span>
    <span class="p">{</span>
       <span class="n">ReDotNode</span> <span class="n">node</span> <span class="p">=</span> <span class="n">RedDotTree</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">FindNode</span><span class="p">(</span><span class="n">redDotView</span><span class="p">.</span><span class="n">id</span><span class="p">);</span>
       <span class="n">ValueText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">node</span><span class="p">.</span><span class="n">mCheckFun</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">().</span><span class="nf">ToString</span><span class="p">();</span>
       <span class="n">SumText</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">node</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>JoVanko</name></author><category term="游戏系统设计" /><category term="设计模式" /><summary type="html"><![CDATA[红点提示是一种常见的用户界面元素，用于提示玩家有未读的消息或待处理的任务，那么它是怎么实现的呢？]]></summary></entry><entry><title type="html">BossRoom解读-1</title><link href="/jekyll-theme-yat/unitydemo/2023/12/13/BossRoom%E8%A7%A3%E8%AF%BB-1.html" rel="alternate" type="text/html" title="BossRoom解读-1" /><published>2023-12-13T00:00:00+00:00</published><updated>2023-12-13T00:00:00+00:00</updated><id>/jekyll-theme-yat/unitydemo/2023/12/13/BossRoom%E8%A7%A3%E8%AF%BB-1</id><content type="html" xml:base="/jekyll-theme-yat/unitydemo/2023/12/13/BossRoom%E8%A7%A3%E8%AF%BB-1.html"><![CDATA[<h2 id="applicationlifecycle包">ApplicationLifecycle包</h2>

<blockquote>
  <p>ApplicationController类</p>
</blockquote>

<p>应用程序的入口点，将所有常见依赖项绑定到根 DI 范围。</p>

<p>这里有ICO注入的概念</p>

<p>初始化几个组合</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">UpdateRunner</span> <span class="n">m_UpdateRunner</span><span class="p">;</span>
  <span class="n">ConnectionManager</span> <span class="n">m_ConnectionManager</span><span class="p">;</span>
  <span class="n">NetworkManager</span> <span class="n">m_NetworkManager</span><span class="p">;</span>
</code></pre></div></div>
<h2 id="audio包">Audio包</h2>

<blockquote>
  <p>ClientMusicPlayer类
AudioMixerConfigurator类</p>
</blockquote>

<p>播放音乐和管理音效的单例类</p>

<h2 id="camerautils包">CameraUtils包</h2>

<blockquote>
  <p>CameraController</p>
</blockquote>

<p>摄像机控制器</p>

<h2 id="connectionmanagement包">ConnectionManagement包</h2>

<blockquote>
  <p>ConnectionMethodBase
ConnectionMethod 包含设置 NGO 准备启动连接（主机或客户端）所需的所有设置。请重写此抽象类以添加新的传输或连接方式。</p>
</blockquote>

<blockquote>
  <p>ConnectionMethodIP</p>
</blockquote>

<p>用于使用 UTP 进行简单的 IP 连接设置。
用于配置 Unity Relay 主机和客户端的连接，通过设置 IP 地址和端口号，实现简单的直接连接方式。</p>

<blockquote>
  <p>ConnectionMethodRelay</p>
</blockquote>

<p>使用 Lobby 集成的 UTP Relay 连接设置
用于设置 Unity Relay 客户端和主机的连接，并在 Lobby 服务中更新相关的数据。</p>

<h3 id="connectionmanagementconnectionstate-包">ConnectionManagement.ConnectionState 包</h3>

<p>状态模式管理不同的游戏状态</p>

<h2 id="infrastructure包">Infrastructure包</h2>

<blockquote>
  <p>UpdateRunner类</p>
</blockquote>

<p>某些对象可能需要比通常的 MonoBehaviour 更新 更慢的更新循环，并且没有精确的计时，例如 刷新服务中的数据。
有些可能根本不想耦合到 Unity 对象，但仍然需要更新循环。</p>

<p>即用于定时更新某些 服务 或 UI</p>]]></content><author><name>JoVanko</name></author><category term="UnityDemo" /><category term="Unity" /><category term="Demo" /><summary type="html"><![CDATA[ApplicationLifecycle包]]></summary></entry><entry><title type="html">C#下使用单例模式</title><link href="/jekyll-theme-yat/c%23/2023/12/13/C-%E4%B8%8B%E4%BD%BF%E7%94%A8%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html" rel="alternate" type="text/html" title="C#下使用单例模式" /><published>2023-12-13T00:00:00+00:00</published><updated>2023-12-13T00:00:00+00:00</updated><id>/jekyll-theme-yat/c%23/2023/12/13/C#%E4%B8%8B%E4%BD%BF%E7%94%A8%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F</id><content type="html" xml:base="/jekyll-theme-yat/c%23/2023/12/13/C-%E4%B8%8B%E4%BD%BF%E7%94%A8%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"><![CDATA[<p>一般常见写法，但是不是线程安全的，在多个线程访问 if (instance == null) 时会，同时进入if语句内创建多个Singleton实例。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Singleton</span>
<span class="p">{</span>
    <span class="c1">// 直接初始化单例实例</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="p">;</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">Instance</span>
    <span class="p">{</span>
        <span class="k">get</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 私有构造函数</span>
    <span class="k">private</span> <span class="nf">Singleton</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 这里可以进行一些初始化工作</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Singleton instance created."</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">SomeMethod</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"SomeMethod called."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>我们测试一下：</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 创建50个线程访问单例实例</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">50</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
        <span class="p">{</span>
            <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">ThreadPool</span><span class="p">.</span><span class="nf">QueueUserWorkItem</span><span class="p">((</span><span class="n">state</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="p">{</span>
                <span class="n">Task</span><span class="p">.</span><span class="nf">Delay</span><span class="p">(</span><span class="m">50</span><span class="p">).</span><span class="nf">Wait</span><span class="p">();</span>
                <span class="n">Singleton</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">SomeMethod</span><span class="p">();</span>
            <span class="p">});</span>
        <span class="p">}</span>

        <span class="n">Console</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>结果：</p>

<p><img src="https://zhaohuanke123.github.io/assets/images/CSharp/1702434181028.png" alt="image" /></p>

<p>可以发现有多个实例被创建</p>

<p>简单的线程安全做法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Singleton</span>
<span class="p">{</span>
    <span class="c1">// 直接初始化单例实例</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="p">();</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">Instance</span> <span class="p">=&gt;</span> <span class="n">instance</span><span class="p">;</span>

    <span class="c1">// 私有构造函数</span>
    <span class="k">private</span> <span class="nf">Singleton</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// 这里可以进行一些初始化工作</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Singleton instance created."</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">a</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>


</code></pre></div></div>

<p>但是这样在我们访问如何静态字段时都会创建单例实例</p>

<p>测试如下：</p>

<p><img src="https://zhaohuanke123.github.io/assets/images/CSharp/2023-12-13%20103347.png" alt="image" /></p>

<p>使用 Monitor 来确保线程安全</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Singleton</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="kt">object</span> <span class="n">syncRoot</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">();</span>

    <span class="c1">// 公共属性，用于获取单例实例</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">Instance</span>
    <span class="p">{</span>
        <span class="k">get</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">Monitor</span><span class="p">.</span><span class="nf">Enter</span><span class="p">(</span><span class="n">syncRoot</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="n">Monitor</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="n">syncRoot</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">instance</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 私有构造函数，确保外部不能直接实例化</span>
    <span class="k">private</span> <span class="nf">Singleton</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Singleton instance created."</span><span class="p">);</span>
        <span class="c1">// 这里可以进行一些初始化工作</span>
    <span class="p">}</span>

    <span class="c1">// 其他成员方法/属性</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SomeMethod</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"SomeMethod called."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>使用 Lazy <code class="language-plaintext highlighter-rouge">&lt;T&gt;</code> 来延迟加载</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Singleton</span>
<span class="p">{</span>
    <span class="c1">// 私有静态实例变量</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">Singleton</span><span class="p">&gt;</span> <span class="n">instance</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">Singleton</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="p">());</span>

    <span class="c1">// 公共属性，用于获取单例实例</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">Instance</span>
    <span class="p">{</span>
        <span class="k">get</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">instance</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 私有构造函数，确保外部不能直接实例化</span>
    <span class="k">private</span> <span class="nf">Singleton</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Singleton instance created."</span><span class="p">);</span>
        <span class="c1">// 这里可以进行一些初始化工作</span>
    <span class="p">}</span>

    <span class="c1">// 其他成员方法/属性</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SomeMethod</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"SomeMethod called."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>这部分读者可以自行测试</p>]]></content><author><name>JoVanko</name></author><category term="C#" /><category term="CSharp" /><category term="设计模式" /><summary type="html"><![CDATA[一般常见写法，但是不是线程安全的，在多个线程访问 if (instance == null) 时会，同时进入if语句内创建多个Singleton实例。]]></summary></entry><entry><title type="html">异步操作笔记</title><link href="/jekyll-theme-yat/c%23/2023/12/04/CSharp-%E5%BC%82%E6%AD%A5.html" rel="alternate" type="text/html" title="异步操作笔记" /><published>2023-12-04T00:00:00+00:00</published><updated>2023-12-04T00:00:00+00:00</updated><id>/jekyll-theme-yat/c%23/2023/12/04/CSharp-%E5%BC%82%E6%AD%A5</id><content type="html" xml:base="/jekyll-theme-yat/c%23/2023/12/04/CSharp-%E5%BC%82%E6%AD%A5.html"><![CDATA[<h1 id="多线程">多线程</h1>

<h1 id="线程本地储存">线程本地储存</h1>

<h1 id="事件循环机制">事件循环机制</h1>

<p>程序有一个或多个线程，专门用于捕获对象检查状态，把执行的阻塞操作转换为非阻塞操作，再注册事件以在完成后收到通知</p>

<p>(程序编写难度高)
JS=单线程</p>

<p>基于回调的异步操作，Netty（Java框架）、AIO（操作系统提供）</p>

<p>异步编程模型</p>

<h1 id="tpl">TPL</h1>

<h1 id="异步操作">异步操作</h1>

<p>具有传染性</p>

<h1 id="asyncawait-tpl支持">async/await TPL支持</h1>

<p>async用于标记方法，使其能够使用异步操作</p>

<p>await用于等待异步操作完成</p>

<p>异步操作：需要多线程支持，但不需要很多</p>

<p>最少2个线程即可
1个处理任务，1一个检查状态调用回调</p>

<h1 id="异步本地储存">异步本地储存</h1>

<p>AsyncLocal <code class="language-plaintext highlighter-rouge">&lt;T&gt;</code>类</p>

<p>通过执行上下文（每一个托管线程对象拥有）来传播值</p>

<p>可以传递给子任务，但是不能传递给父任务</p>

<p>可以使用引用类型来传递值</p>]]></content><author><name>JoVanko</name></author><category term="C#" /><category term="CSharp" /><summary type="html"><![CDATA[多线程]]></summary></entry><entry><title type="html">GC 概念学习</title><link href="/jekyll-theme-yat/csharp/2022/01/02/GC%E5%AD%A6%E4%B9%A0.html" rel="alternate" type="text/html" title="GC 概念学习" /><published>2022-01-02T00:00:00+00:00</published><updated>2022-01-02T00:00:00+00:00</updated><id>/jekyll-theme-yat/csharp/2022/01/02/GC%E5%AD%A6%E4%B9%A0</id><content type="html" xml:base="/jekyll-theme-yat/csharp/2022/01/02/GC%E5%AD%A6%E4%B9%A0.html"><![CDATA[<h1 id="堆和栈">堆和栈</h1>

<blockquote>
  <p>堆空间</p>
</blockquote>

<p>堆空间是程序中一块独立的空间，</p>

<p>从堆空间分配的数据可以被程序中的所有函数和线程访问，</p>

<p>并且不会随函数返回与线程结束释放。</p>

<blockquote>
  <p>栈空间</p>
</blockquote>

<p>每个线程都有独立的栈空间，栈空间用于保存调用函数的数据</p>

<p>释放堆内存的时机由 .net runtime 决定，大多时候我们不需要关心</p>

<p>内存泄漏主要指堆空间的泄露</p>

<h1 id="值类型和引用类型">值类型和引用类型</h1>

<p>值类型：分配在栈中，本身储存着值</p>

<p>引用类型：</p>

<p>包括两部分：指向内存的地址的地址 和 值本身（堆中）</p>

<p>（class中的 值类型 在堆中）</p>

<p>值 类 型 的 对 象 会 根 据 定 义 的 位 置 隐 式 分 配 与 释 放 。</p>

<p>引 用 类 型 的 对 象 需 要 通 过n e w关 键 字 显 示 分 配 ，n e w会 从 堆 空 间 申 请 一</p>

<p>块 空 间 用 于 保 存 值 ， 然 后 返 回 空 间 的 开 始 地 址 。</p>

<p>new关键字本质：调用构造函数，设置成员值</p>

<p>对引用类型进行赋值，内存中只会多出一块指向已分配空间的内存地址</p>

<p>如果内存中没有值指向某已分配空间，这个空间就会在一个合适的时机被GC回收</p>

<h2 id="引用类型">引用类型</h2>

<p>值由三部分组成：</p>

<ol>
  <li>对象头</li>
  <li>类型信息</li>
  <li>字段内容</li>
</ol>

<h3 id="对象头">对象头</h3>

<p>包含标志和同步块索引等数据</p>

<p>32位平台：4个字节</p>

<p>64位：8个字节（只有后面四个字节会被用到）</p>

<p>（4字节）32位中</p>

<p>高1位用于。NET运行中内部检查托管堆状态时，标记对象是否已检查。</p>

<p>高2位用于标记是否抑制运行对象的析构函数。</p>

<p>高3位用于标记对象是蚕为固定对象。</p>

<p>高4、5、6为用于标记低26位保存了什么内容，其中就包括了获取锁、释放锁和
对象Hash值的信息。</p>

<h3 id="类型信息">类型信息</h3>

<p><em>类型信息</em> 是一个指向的</p>

<p>.NET 运行时内部保存的类型数据(MethodTable)的内存地址。</p>

<p>类型数据包含了类型的所属模块名称、字段列表、属性列表、方法列表，以及各个方法的口点的地址等信息。</p>

<h1 id="gc">GC</h1>

<p>针对 堆空间回收</p>

<p>主要工作：找出堆空间分配的空间中哪些空间不再被程序使用，然后回收这些空间。</p>

<p>.Net 实现GC的方式（最主流）：”标记并清除“方式</p>

<p>根对象：包括</p>

<ol>
  <li>各个线程栈空间上的变量</li>
  <li>全局变量</li>
  <li>GC句柄</li>
  <li>析构队列中的对象</li>
</ol>

<p>.Net 中托管代码分配的对象称为托管对象</p>

<p>分配托管对象使用的堆，称为托管堆</p>

<p>其他的堆空间，用于分配.Net运行时的对象</p>

<h1 id="net-gc机制">.Net GC机制</h1>

<h2 id="分代">分代</h2>

<p>0代、1代、2代</p>

<p>首先根据内存大小，小对象在第0代，大对象在第2代</p>

<p>在一轮GC后，第0代对象（还没被回收的）通常会成为第1代</p>

<p>0代 -&gt; 1代</p>

<p>1代 -&gt; 2代</p>

<p>2代 -&gt; 2代</p>

<p>第0代中的对象存活时间通常最短，</p>

<p>第1代中的对象存活时间比较长，</p>

<p>第2代中的对象存活时间最长。</p>

<p>（通常来说，存活越长时间的对象会一直存在）</p>

<p>例外情况：</p>

<p>分代机制：</p>

<p>0、1、2代都处理的GC称为完整GC</p>

<p>分代依据的目的是：</p>

<p>尽量增加每次执行垃圾回收处理时，可回收的对象的数量，并减少处理所需的时间。</p>

<h2 id="压缩">压缩</h2>

<p>反复执行分配与回收操作，可能导致堆上产生很多空余空间，</p>

<p>这些空余空间又被称为碎片空间。</p>

<p>压缩机制可以通过移动已分配空间把碎片空间合并到一块，</p>

<p>使得堆可以分配更大的对象。</p>

<p>.NET运行时提供的GC是支持压缩机制的，但是只在一定
的条件下启用。</p>

<blockquote>
  <p>大小对象概念</p>
</blockquote>

<p>（超过大约 85000 B的对象称为大对象）</p>

<p>.NET根据引用类型对象值占用的空间大小来区分是小对象还是大对象。</p>

<p>大对象与小对象会在不同的堆区域中分配：称为大对象堆和小对象堆。</p>

<p>移动大对象需要的（时间、资源）成本很高</p>

<p>（新分配的小对象归属0代、大对象归属2代）</p>

<p>前面提到的压缩机制，默认只在小对象堆启用，大对象堆是不会执行压缩的。</p>

<h2 id="固定对象">固定对象</h2>

<p><strong>托管代码（Managed Code）</strong> ：</p>

<ul>
  <li><strong>定义</strong> ：托管代码是由.NET运行时（CLR，Common Language Runtime）环境管理和执行的代码。这种代码使用.NET语言（如C#、VB.NET、F#等）编写，并在编译后生成中间语言（IL，Intermediate Language）代码，然后在运行时由CLR转换成本地机器代码。</li>
</ul>

<p><strong>非托管代码（Unmanaged Code）</strong> ：</p>

<ul>
  <li><strong>定义</strong> ：非托管代码是不依赖于CLR运行时的代码，通常由本地编译器生成，并且没有CLR的垃圾回收和内存管理功能。这种代码直接操作计算机硬件和操作系统资源。</li>
</ul>

<p>.NET 支持托管代码调用非托管代码</p>

<p>一个引用类型对象传递给非托管代码，其内存地址会被复制到非托管代码管理的区域中</p>

<p>.NET 无法知道内存保存在哪里，无法知道非托管代码是否还在使用该对象</p>

<p>如果进行压缩操作，非托管代码中保存的引用类型对象地址就不能同步更新</p>

<p>.NET就要求在这个过程中必须创建固定类型的GC句柄，并在托管代码中保持这个句柄存活
非托管代码的调用结束</p>

<p>创建了固定类型GC句柄的对象称为固定对象</p>

<p>压缩操作会避开这些对象，会产生垃圾碎片</p>

<p>固定对象在垃圾回收后可能会降代</p>

<h2 id="析构队列">析构队列</h2>

<p>.NET 支持在回收对象前调用析构函数（其中可调用非托管代码）</p>

<p>析构函数的执行需要时间不确定 -&gt; 垃圾回收时间不可预料</p>

<p>则需要一个析构队列和一个析构线程</p>

<p>如果对象被标记为 不再存活 但定义了析构函数，那么对象会添加到析构队列并标记存活</p>

<p>GC结束后启动一个析构线程，该线程会从析构队列中取对象执行析构函数，执行完毕的对象可在下一轮GC中被回收。</p>

<p>析构函数通常是在使用非托管类型的对象中定义（不绝对）</p>

<p>如FileStream（使用了文件句柄）</p>

<p>使用Dispose，关闭文件句柄</p>

<p>这些对象在我们不使用托管资源时应该主动去调用Dispose释放，执行后应抑制析构函数的运行？</p>

<h2 id="stw">STW</h2>

<p>GC线程和其他处理线程的冲突</p>

<p>让GC处理以外的线程全部暂停运行，这样的操作称为STW （Stop The World）</p>

<p>如何减少STW时间</p>

<p>.NET 的GC会在必要时停止 其他处理线程</p>

<p>但不是直接停止（不能暂停其他线程），是让其他线程切换模式</p>

<blockquote>
  <p>托管线程模式</p>
</blockquote>

<ol>
  <li>合作模式</li>
  <li>抢占模式</li>
</ol>

<h2 id="gc工作模式">GC工作模式</h2>

<ol>
  <li>工作站模式：适用于内存占用量小的程序和桌面程序，可以提供更短的响应时间。</li>
  <li>服务器模式：适用于内存占用量大的程序与服务程序，可以提供更高的吞吐量</li>
</ol>

<table>
  <thead>
    <tr>
      <th>不同点</th>
      <th>工作站模式</th>
      <th>服务器模式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GC的频率</td>
      <td>频繁</td>
      <td>不频繁</td>
    </tr>
    <tr>
      <td>CC使用的线程</td>
      <td>分配对象的线程</td>
      <td>独立线程</td>
    </tr>
    <tr>
      <td>GC使用的线程数</td>
      <td>单线程</td>
      <td>多线程</td>
    </tr>
  </tbody>
</table>

<p>各有各的优点，适用不同场景</p>

<h2 id="gc类型">GC类型</h2>

<ol>
  <li>普通GC</li>
  <li>后台GC</li>
</ol>

<p>普通GC会导致更长的单次STW停顿时间，但消耗的资源比较小，并且支持压缩处理。</p>

<p>后台GC每次STW停顿时间会更短，但停顿次数与消耗的资源会更多，并且不支持压缩处理。</p>

<table>
  <thead>
    <tr>
      <th>不同点</th>
      <th>普通cC</th>
      <th>后台CC</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>目标代</td>
      <td>第0、1、2代</td>
      <td>第2代</td>
    </tr>
    <tr>
      <td>执行时间</td>
      <td>短</td>
      <td>长</td>
    </tr>
    <tr>
      <td>STW停顿时间</td>
      <td>整个执行过程</td>
      <td>部分执行过程</td>
    </tr>
    <tr>
      <td>执行垃圾处理使用的线程</td>
      <td>根据模式而定</td>
      <td>独立线程</td>
    </tr>
    <tr>
      <td>压缩处理</td>
      <td>支持</td>
      <td>不支持</td>
    </tr>
  </tbody>
</table>

<h1 id="net-程序的内存结构">.NET 程序的内存结构</h1>

<p>标记，清除标记为0的对象？</p>

<p>垃圾回收机制会记录哪些对象存活</p>

<h2 id="内存结构">内存结构</h2>

<p><img src="image/GC/1701133797766.png" alt="1701133797766" title="内存结构" /></p>

<p>托管函数代码堆：保存从托管函数由JIT编译过的机器代码</p>

<p>函数入口代码堆：保存未编译的</p>

<h2 id="托管堆">托管堆</h2>

<p>一个进程(.NET程序)只有一个</p>

<p>用于保存引用类型对象的值</p>

<p><img src="image/GC/1701134278045.png" alt="1701134278045" /></p>

<p>区域数量与工作模式，CPU核心（逻辑核心）有关</p>

<p>堆段：一个预先分配的固定大小的空间</p>

<p>引用类型对象 值 按顺序保存 堆段中</p>

<p>各个堆段通过链表理解在一起</p>

<p>小对象保存在小对象堆段，大对象保存在大对象堆段中</p>

<p>例外：一些不被回收或不大可能被回收的对象（不是大对象的）也会保存在大对象堆段中</p>

<p>如：字符串池分配的字符串对象，保存所有引用类型对象的数组，反射相关的对象</p>

<p>上面所述会保存在大对象堆中，会强制留在第二代，默认不参与压缩，这个操作有助于减少垃圾回收的工作量。</p>

<h2 id="分配上下文">分配上下文</h2>

<p><strong>堆段</strong>如何分配对象值</p>

<p><img src="image/GC/1701135045450.png" alt="1701135045450" /></p>

<p>以上在单线程下可以很好工作</p>

<p>多线程下需要获取线程锁（有性能影响）</p>

<p><img src="image/GC/1701135156733.png" alt="1701135156733" /></p>

<p>因此，.NET运行时在线程获取线程锁时，会在堆段中分配一段空间，后续该线程可以使用这段空间不需要获取线程锁（直到空间用完，这个空间称为分配上下文）</p>

<p>分配上下文只适用小对象</p>

<p>短暂堆段</p>

<p>自由对象列表</p>

<p>P114</p>]]></content><author><name>jovanko</name></author><category term="CSharp" /><category term="CSharp" /><category term="GC" /><category term="底层" /><summary type="html"><![CDATA[堆和栈]]></summary></entry></feed>